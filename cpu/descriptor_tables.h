#ifndef DESCRIPTOR_H_
#define DESCRIPTOR_H_

#include <stdint.h>

void init_descriptor_tables();

//data struct for gdt
typedef struct {
   uint16_t limit_low;           // The lower 16 bits of the limit.
   uint16_t base_low;            // The lower 16 bits of the base.
   uint8_t  base_middle;         // The next 8 bits of the base.
   uint8_t  access;              // Access flags, determine what ring this segment can be used in.
   uint8_t  granularity;
   uint8_t  base_high;           // The last 8 bits of the base.
}__attribute__((packed)) gdt_entry_t;

typedef struct {
    uint16_t limit;
    uint32_t base;
}__attribute__((packed)) gdt_ptr_t;


//idt tell cpu how to handle exception generated by cpu(ISR) or 
//interrupt generated by hardware(IRQ)
//data struct for idt
typedef struct {
    uint16_t base_lo;  //low 16bits address to jump to
    uint16_t sel;  //kernel segment selector in gdt, 0x08 the code segment
    uint8_t always0;   //reserved
    uint8_t flags;
    uint16_t base_hi;  //high 16bits address to jump to
}__attribute__((packed)) idt_entry_t;

typedef struct {
    uint16_t limit;
    uint32_t base;
}__attribute__((packed)) idt_ptr_t;


#endif //DESCRIPTOR_H_